inc(bs: Bits): Pair<Bool, Bits>
  case bs {
    e:
      {true, Bits.e}
    o:
      {false, Bits.i(bs.pred)}
    i:
      let {carry, pred} = inc(bs.pred)
      {carry, Bits.o(pred)}
  }

slow.__loop__(next: Bits): Bits
  let {carry, next} = inc(next)
  case carry {
    true: next
    false: slow.__loop__(next)
  }

normal_inc: _
  let o = Bits.o
  slow.__loop__(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(o(Bits.e)))))))))))))))))))))))))))))
